package main

import (
	"context"
	"errors"
	"github.com/gin-gonic/gin"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"net/http"
)

var db *pgxpool.Pool

type Beleg struct {
	Id    int     `json:"id,omitempty"`
	Price float64 `json:"price"`
	Mwst  float64 `json:"mwst"`
	Date  string  `json:"date"`
	Shop  string  `json:"shop"`
}

func init() {
	db = Connect("postgres://root:root@localhost:5432/beleg_db")
}

func Connect(dbURL string) *pgxpool.Pool {
	connPool, err := pgxpool.New(context.Background(), dbURL)
	if err != nil {
		panic(err)
	}
	err = connPool.Ping(context.Background())
	if err != nil {
		panic(err)
	}
	return connPool
}

func main() {
	r := gin.Default()

	r.SecureJsonPrefix(")]}',\n")

	r.GET("/ping", func(c *gin.Context) {
		c.SecureJSON(http.StatusOK, gin.H{
			"message": "pong",
		})
	})

	// Simple group: v1
	v1 := r.Group("/v1/")
	{
		v1.GET("beleg/:id", getBelegById)
		v1.GET("beleg", getBelege)
		v1.POST("beleg", createBeleg)
		v1.DELETE("beleg/:id", deleteBelegById)
	}

	r.Run(":8080") // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}

func deleteBelegById(c *gin.Context) {
	// Die ID wird als URL-Parameter erwartet
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "id is required"})
		return
	}

	tx, err := db.Begin(c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer tx.Rollback(c)

	query := `DELETE FROM "belege" WHERE "id" = $1;`
	_, err = tx.Exec(c, query, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	if err := tx.Commit(c); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Beleg deleted successfully"})
}

func createBeleg(c *gin.Context) {
	var beleg = Beleg{}

	if err := c.ShouldBindJSON(&beleg); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	tx, err := db.Begin(c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer tx.Rollback(c)

	insertDynStmt := `insert into "belege"("b_price", "b_mwst", "b_date", "b_shop") values($1, $2, $3, $4);`

	_, err = tx.Exec(c, insertDynStmt, beleg.Price, beleg.Mwst, beleg.Date, beleg.Shop)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	if err := tx.Commit(c); err != nil { // Commit der Transaktion
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	//c.JSON(http.StatusCreated, beleg)
	c.JSON(http.StatusCreated, "OK")
	return
}

func getBelege(c *gin.Context) {
	tx, err := db.Begin(c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer tx.Rollback(c)

	query := `SELECT * FROM "belege";`
	rows, err := tx.Query(c, query)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer rows.Close() // Stellen Sie sicher, dass die Zeilen am Ende geschlossen werden

	var belege []Beleg
	for rows.Next() {
		var beleg Beleg
		if err := rows.Scan(&beleg.Id, &beleg.Price, &beleg.Mwst, &beleg.Date, &beleg.Shop); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}
		belege = append(belege, beleg)
	}

	if err := tx.Commit(c); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, belege)
}

func getBelegById(c *gin.Context) {
	// Die ID wird als URL-Parameter erwartet
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "id is required"})
		return
	}

	tx, err := db.Begin(c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	defer tx.Rollback(c)

	query := `SELECT "id", "b_price", "b_mwst", "b_date", "b_shop" FROM "belege" WHERE "id" = $1;`
	row := tx.QueryRow(c, query, id)

	var beleg Beleg
	if err := row.Scan(&beleg.Id, &beleg.Price, &beleg.Mwst, &beleg.Date, &beleg.Shop); err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			c.JSON(http.StatusNotFound, gin.H{"error": "Beleg not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	if err := tx.Commit(c); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, beleg)
}
